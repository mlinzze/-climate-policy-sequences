#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

This script visualises the sequences of instrument types that are generated by the previous script.

"""

__author__ = "Manuel Linsenmeier"
__email__ = "m.linsenmeier@lse.ac.uk"
__version__ = "0.9"

import sys
import os
import copy

import numpy as np
import pandas as pd
import itertools

import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.colors import LinearSegmentedColormap
import seaborn as sns

## ============================================================

color_palette = \
	['#CC6677', '#332288', '#DDCC77', '#117733', '#88CCEE', '#882255', '#44AA99', '#999933', '#AA4499']
#color_palette = \
#	['#EE7733', '#0077BB', '#33BBEE', '#EE3377', '#CC3311', '#009988', '#BBBBBB']

## ============================================================

df = pd.read_csv('./results/sequences_instruments_by_country.csv')
df = df.rename(columns={'Unnamed: 0': 'iso'})

## ============================================================

instrument2value = {\
					'policy': 0,
					'information': 1,
					'voluntary': 2,
					'research': 3,
					'procurement': 4,
					'grants': 5,
					'regulatory': 6,
					'carbon': 7
}

instrument2label = {\
					'policy': 'PS',
					'information': 'IE',
					'voluntary': 'VA',
					'research': 'RD',
					'procurement': 'PI',
					'grants': 'GS',
					'regulatory': 'RI',
					'carbon': 'CP'
}

instrument2text = {\
					'policy': 'Policy support (PS)',
					'information': 'Information and education (IE)',
					'voluntary': 'Voluntary agreements (VA)',
					'research': 'Research, development, and deployment (RD)',
					'procurement': 'Procurement and investment (PI)',
					'grants': 'Grants, subsidies, and other financial incentives (GS)',
					'regulatory': 'Regulatory instruments (RI)',
					'carbon': 'Carbon pricing (CP)'
}

## ============================================================


# sort countries by year of introduction of carbon pricing
df_firstyear = pd.read_csv('./data/carbonpricing_firstyear.csv')
iso2year = dict(zip(df_firstyear['iso'], df_firstyear['year']))
df['year'] = df['iso'].apply(lambda x: iso2year.get(x))
df = df.loc[df['year'].notnull(), :]
df = df.sort_values(by=['year', 'iso'], ascending=True, ignore_index=True)
codes = df['iso'].values

df.index = codes
cols = df.columns[1:-1]
df_annot = df.loc[:, cols]
df_values = df.loc[:, cols]
for col in cols:
	df_annot[col] = df_annot[col].apply(lambda x: instrument2label[x])
	df_values[col] = df_values[col].apply(lambda x: instrument2value[x])

## ============================================================

bounds = np.arange(-0.5, 8.5, 1)
cmap = LinearSegmentedColormap.from_list('Custom', color_palette, len(color_palette))
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

fig, ax = plt.subplots(figsize=(8,4))
hm = sns.heatmap(df_values, cmap=cmap, norm=norm, annot=df_annot, linecolor='k', lw=0.5, ax=ax, fmt='s')
cb = hm.collections[0].colorbar
cb.set_ticks(bounds+0.5)
cb.set_ticklabels(list(instrument2text.values()))
sns.despine(ax=ax, offset=1., right=True, top=True)
#ax.set_yticklabels(instrumentnames)
ax.set_xticklabels([str(i) for i in range(1, 9, 1)])
ax.set_ylabel("")
ax.set_xlabel("Order of instrument types in observed policy implementation $\longrightarrow$")
#ax.set_xticklabels(instruments_names, rotation=30.)
fig.savefig('./figures/sequences-instruments_by-country.pdf', bbox_inches='tight', dpi=300.)

## ============================================================

sectors = ['electricity-and-heat-production', 'buildings', 'industry', 'transport',  'afolu'] #'general','all', 
for i, sector in enumerate(sectors):
	if i == 0:
		df_allcountries = pd.read_csv('./results/sequences_instruments_by_sector_{0:s}.csv'.format(sector))
		df_allcountries.columns = [sector]
	else:
		df_new = pd.read_csv('./results/sequences_instruments_by_sector_{0:s}.csv'.format(sector))
		df_new.columns = [sector]
		df_allcountries = pd.concat([df_allcountries, df_new], axis=1)

df_allcountries.index = ['no_' + str(i) for i in range(1, 9, 1)]
df_allcountries = df_allcountries.T.replace('support', 'policy').replace('pricing', 'carbon')
df_allcountries.index = [s[0].upper() for s in df_allcountries.index]

cols = df_allcountries.columns
df_annot = df_allcountries.loc[:, cols]
df_values = df_allcountries.loc[:, cols]
for col in cols:
	df_annot[col] = df_annot[col].apply(lambda x: instrument2label[x])
	df_values[col] = df_values[col].apply(lambda x: instrument2value[x])

## ============================================================

bounds = np.arange(-0.5, 8.5, 1)
cmap = LinearSegmentedColormap.from_list('Custom', color_palette, len(color_palette))
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

fig, ax = plt.subplots(figsize=(8,4./3))
hm = sns.heatmap(df_values, cmap=cmap, norm=norm, annot=df_annot, linecolor='k', lw=0.5, ax=ax, fmt='s', cbar=False)
#cb = hm.collections[0].colorbar
#cb.set_ticks(bounds+0.5)
#cb.set_ticklabels(list(instrument2text.values()))
sns.despine(ax=ax, offset=1., right=True, top=True)
#ax.set_yticklabels(instrumentnames)
ax.set_xticklabels("")
ax.set_ylabel("")
ax.set_xlabel("")
#ax.set_xticklabels(instruments_names, rotation=30.)
fig.savefig('./figures/sequences-instruments_by-sector.pdf', bbox_inches='tight', dpi=300.)

## ============================================================

sectors = ['all'] #'general','all', 
for i, sector in enumerate(sectors):
	if i == 0:
		df_allcountries = pd.read_csv('./results/sequences_instruments_by_sector_{0:s}.csv'.format(sector))
		df_allcountries.columns = [sector]
	else:
		df_new = pd.read_csv('./results/sequences_instruments_by_sector_{0:s}.csv'.format(sector))
		df_new.columns = [sector]
		df_allcountries = pd.concat([df_allcountries, df_new], axis=1)

df_allcountries.index = ['no_' + str(i) for i in range(1, 9, 1)]
df_allcountries = df_allcountries.T.replace('support', 'policy').replace('pricing', 'carbon')
df_allcountries.index = [s[0].upper() for s in df_allcountries.index]

cols = df_allcountries.columns
df_annot = df_allcountries.loc[:, cols]
df_values = df_allcountries.loc[:, cols]
for col in cols:
	df_annot[col] = df_annot[col].apply(lambda x: instrument2label[x])
	df_values[col] = df_values[col].apply(lambda x: instrument2value[x])

## ============================================================

bounds = np.arange(-0.5, 8.5, 1)
cmap = LinearSegmentedColormap.from_list('Custom', color_palette, len(color_palette))
norm = mpl.colors.BoundaryNorm(bounds, cmap.N)

fig, ax = plt.subplots(figsize=(8,4./15))
hm = sns.heatmap(df_values, cmap=cmap, norm=norm, annot=df_annot, linecolor='k', lw=0.5, ax=ax, fmt='s', cbar=False)
#cb = hm.collections[0].colorbar
#cb.set_ticks(bounds+0.5)
#cb.set_ticklabels(list(instrument2text.values()))
sns.despine(ax=ax, offset=1., right=True, top=True)
ax.set_yticklabels("")
ax.set_xticklabels("")
ax.set_ylabel("")
ax.set_xlabel("")
#ax.set_xticklabels(instruments_names, rotation=30.)
fig.savefig('./figures/sequences-instruments_all.pdf', bbox_inches='tight', dpi=300.)

