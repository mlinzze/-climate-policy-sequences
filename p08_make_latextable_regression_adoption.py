#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""

This script produces regression tables formatted with Latex from the results generated by the previous script.

"""

__author__ = "Manuel Linsenmeier"
__email__ = "m.linsenmeier@lse.ac.uk"
__version__ = "0.9"

import sys
import os
from copy import deepcopy

import numpy as np
import pandas as pd

from scipy.stats import t 

## ===== define some functions ===== ##

def get_stars(p, mode=1):
	if mode == 0:
		if p < 0.001:
			return '$^{* * *}$'
		elif p < 0.01:
			return '$^{* *}$'
		elif p < 0.05:
			return '$^{*}$'
		else:
			return ''
	elif mode == 1:
		if p < 0.01:
			return '$^{* * *}$'
		elif p < 0.05:
			return '$^{* *}$'
		elif p < 0.1:
			return '$^{*}$'
		else:
			return ''

CONTROLS_GROUPS = {}
intercept_variables = []

var2name = {\
			'log_gdp_pc_ppp': 'log GDP per capita PPP',
			'reserves_coal': 'Coal reserves',
			'reserves_oil': 'Oil reserves',
			'reserves_gas': 'Gas reserves',
			'kofpogi': 'Globalization index',
			'coc': 'Control of corruption',
			'hdi_edu_': 'Education',
			'hdi': 'Education',
			'length_sequence': 'Length of policy sequence',
			'Intercept': 'Intercept',
			'empty': ''
}

for controls_group in CONTROLS_GROUPS.keys():
	var2name[controls_group] = controls_group

def get_dataframe(df, index_col_est, index_col_se, index_col_p, model_name='Model X'):
	columns = df.columns
	df = df.iloc[:, [0, index_col_est, index_col_se, index_col_p]].rename(columns={'Unnamed: 0': 'Variable',
						columns[index_col_est]: 'Estimate', columns[index_col_se]: 'SE', columns[index_col_p]: 'P'})
	df_new = df.iloc[np.repeat(np.arange(len(df)), 2)].reset_index(drop=True)

	# remove variable label from every second column
	df_new.loc[np.arange(1, df_new.shape[0], 2), 'Variable'] = df_new.loc[np.arange(1, df_new.shape[0], 2), 'Variable'] + '_SE'

	# correct for number of figures to show
	df_new.loc[:, 'Estimate'] = df_new.apply(lambda x: '{0:5.4f}{1:s}'.format(x['Estimate'], get_stars(x['P'])), axis=1)
	df_new.loc[:, 'SE'] = df_new['SE'].apply(lambda x: '({0:5.4f})'.format(x))

	# copy in SE in every second row
	df_new.loc[np.arange(1, df_new.shape[0], 2), 'Estimate'] = df_new.loc[np.arange(1, df_new.shape[0], 2), 'SE']

	# rename column
	df_new = df_new.rename(columns={'Estimate': model_name})

	return df_new[['Variable', model_name]]


def get_dataframe_multiple_SE(df, index_col_est, indices_col_se, model_name='Model X', symbols=[('((', '))'), ('[[', ']]'), ('<<', '>>')]):
	columns = df.columns
	n_se = len(indices_col_se)
	indices_cols = [0] + [index_col_est] + indices_col_se

	dict_se = dict(zip([columns[i] for i in indices_col_se], ['SE-'+str(i) for i in range(0, n_se)]))

	df = df.iloc[:, indices_cols].rename(columns=\
		{
		'Unnamed: 0': 'Variable', columns[index_col_est]: 'Estimate',
		**dict_se,
		})

	# expand datra frame by repeating rows
	df_new = df.iloc[np.repeat(np.arange(len(df)), n_se+1)].reset_index(drop=True)

	# correct for number of figures to show
	df_new.loc[:, 'Estimate'] = df_new.apply(lambda x: '{0:6.5f}'.format(x['Estimate']), axis=1)

	for i in range(0, n_se):
		df_new.loc[:, 'SE-'+str(i)] = df_new['SE-'+str(i)].apply(lambda x: '{0:s}{1:6.5f}{2:s}'.format(symbols[i][0], x, symbols[i][1]))

	# copy in SE in every other row
	for i in range(0, df.shape[0]):
		for j in range(1, n_se+1):
			df_new.loc[i*(n_se+1)+j, 'Variable'] = df_new.loc[i*(n_se+1)+j, 'Variable'] + '_SE-'+str(j-1)
			df_new.loc[i*(n_se+1)+j, 'Estimate'] = df_new.loc[i*(n_se+1)+j, 'SE-'+str(j-1)]

	# rename column
	df_new = df_new.rename(columns={'Estimate': model_name})

	return df_new[['Variable', model_name]]

def sort_variables(df, var2name):
	df['var_sort'] = df['Variable']
	categories_estimates = list(var2name.keys())
	categories_SE = [c + '_SE' for c in categories_estimates]
	categories_all = [None]*(len(categories_estimates)+len(categories_SE))
	categories_all[::2] = categories_estimates
	categories_all[1::2] = categories_SE
	df['var_sort'] = pd.Categorical(
	    df['var_sort'], 
	    categories=categories_all, 
	    ordered=True
	)
	df = df.sort_values(by='var_sort', ignore_index=True)
	df = df.drop(columns=['var_sort'])
	return df


for TABLE_ID in ['01', '02', '03', '04']:

	MULTIPLE_SE = False
	OVB_STATS = False
	REMOVE_CONTROLS = False
	REMOVE_BIN_INTERCEPTS = True

	if TABLE_ID == '01':
		EXPERIMENTS = [
			'adoption_logit_nocontrol',
			'adoption_logit_allcontrols',
			'adoption_logit_handpicked',
			'adoption_logit_lasso',
						]
		COLUMN_NAMES = [str(i+1) for i in range(np.size(EXPERIMENTS))]
		INDEX_COL_EST = 1
		INDEX_COL_SE = 2
		INDEX_COL_P = 3
		REMOVE_CONTROLS = True

	else:
		continue

	df_all = pd.DataFrame(columns=['Variable'])

	for i, EXPERIMENT in enumerate(EXPERIMENTS):

		COLUMN_NAME = COLUMN_NAMES[i]

		# read in regression results as data frame
		datapath = './results/'
		ifile = 'coeffs_{0:s}.csv'.format(EXPERIMENT)
		df = pd.read_csv(os.path.join(datapath, ifile))

		# transform data frame to get all information in one column
		df_new = get_dataframe(df, index_col_est=INDEX_COL_EST, index_col_se=INDEX_COL_SE, index_col_p=INDEX_COL_P, model_name=COLUMN_NAME)

		if MULTIPLE_SE == True:
			df_new = get_dataframe_multiple_SE(df, index_col_est=INDEX_COL_EST, indices_col_se=[6, 8, 10], model_name=COLUMN_NAME)

		# read in R2 and other statistics
		datapath = './results/'
		ifile = 'coeffs_{0:s}.csv'.format(EXPERIMENT)
		df = pd.read_csv(os.path.join(datapath, ifile))

		# add empty line
		df_new = df_new.append({'Variable': 'empty'}, ignore_index=True)
		df_new = df_new.append({'Variable': 'Prsq', COLUMN_NAME: '{0:3.2f}'.format(df['Prsq'].values[0])}, ignore_index=True)
		df_new = df_new.append({'Variable': 'AIC', COLUMN_NAME: '{0:3.2f}'.format(df['AIC'].values[0])}, ignore_index=True)
		df_new = df_new.append({'Variable': 'ncountries', COLUMN_NAME: '{0:3.0f}'.format(df['ncountries'].values[0])}, ignore_index=True)
		df_new = df_new.append({'Variable': 'N', COLUMN_NAME: '{0:3.0f}'.format(df['nobs'].values[0])}, ignore_index=True)

		# remove entries for controls (optional)
		if REMOVE_CONTROLS == True:
			for controls_group in list(CONTROLS_GROUPS.keys()):
				control_variables = CONTROLS_GROUPS[controls_group]
				i = 0
				for var in control_variables:
					if var in df_new['Variable'].values:
						i += 1
				if i == np.size(control_variables):
					df_new = df_new.loc[~df_new['Variable'].isin(control_variables), :]
					df_new = df_new.loc[~df_new['Variable'].isin([c + '_SE' for c in control_variables]), :]
					df_new = df_new.append({'Variable': controls_group, COLUMN_NAME: 'x'}, ignore_index=True)

		if REMOVE_BIN_INTERCEPTS == True:
			df_new = df_new.loc[~df_new['Variable'].isin(intercept_variables), :]
			df_new = df_new.loc[~df_new['Variable'].isin([c + '_SE' for c in intercept_variables]), :]

		# add column of this model to dataframe, merging on variables
		df_all = df_all.merge(df_new, on=['Variable'], how='outer')

	var2name_plus = deepcopy(var2name)
	variables = [variable for variable in df_all['Variable'].unique() if '_SE' not in variable]
	for variable in variables:
		if variable not in var2name.keys():
			var2name_plus[variable] = variable.replace('_', '.')

	var2name_plus_stats = {**var2name_plus,
							'AIC': 'AIC',
							'LLR_p': 'LLR (p)',
							'Prsq': 'Ps. R2',
							'nobs': 'N',
							'ncountries': '# countries',
							}

	if MULTIPLE_SE != True:
		df_all = sort_variables(df_all, var2name_plus_stats)

	# replace variable names
	index_SE = (df_all['Variable'].str.contains('_SE'))
	df_all.loc[index_SE, 'Variable'] = ''
	df_all.loc[~index_SE, 'Variable'] = df_all.loc[~index_SE, 'Variable'].apply(lambda x: var2name_plus_stats[x])

	tablepath = './tables'
	tablefile = 'table_results_adoption_{0:s}.tex'.format(TABLE_ID)
	with pd.option_context("max_colwidth", 1000):
		df_all.to_latex(buf=os.path.join(tablepath, tablefile), index=False, encoding='utf-8', escape=False, column_format='l'+'r'*(df_all.shape[1]-1), na_rep='')

